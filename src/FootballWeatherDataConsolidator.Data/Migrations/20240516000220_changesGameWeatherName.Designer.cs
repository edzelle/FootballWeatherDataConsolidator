// <auto-generated />
using System;
using FootballWeatherDataConsolidator.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FootballWeatherDataConsolidator.Data.Migrations
{
    [DbContext(typeof(FootballContext))]
    [Migration("20240516000220_changesGameWeatherName")]
    partial class changesGameWeatherName
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.5");

            modelBuilder.Entity("FootballWeatherDataConsolidator.Data.Entites.GameEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AwayTeam")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("AwayTeamScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("GMTOffset")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("GameDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("GameSite")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("HomeTeam")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("HomeTeamScore")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Season")
                        .HasColumnType("INTEGER");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Week")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("FootballWeatherDataConsolidator.Data.Entites.GameWeatherEntity", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("AverageApparentTempurature")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AverageRain")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AverageRelativeHumitidty")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AverageSnowfall")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AverageTempurature")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("AverageWindSpeed")
                        .HasColumnType("TEXT");

                    b.HasKey("GameId");

                    b.ToTable("GameWeather");
                });

            modelBuilder.Entity("FootballWeatherDataConsolidator.Data.Entites.TeamEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("FootballWeatherDataConsolidator.Data.Entites.TeamPlaysInStadiumEntity", b =>
                {
                    b.Property<int>("TeamId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StadiumId")
                        .HasColumnType("INTEGER");

                    b.HasKey("TeamId", "StadiumId");

                    b.HasIndex("StadiumId");

                    b.HasIndex("TeamId")
                        .IsUnique();

                    b.ToTable("TeamPlaysInStadium");
                });

            modelBuilder.Entity("FootballWeatherDataConsolidator.Data.Entites.VenueEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Lattitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationCity")
                        .HasColumnType("TEXT");

                    b.Property<string>("LocationState")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Opened")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RoofType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surface")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Stadiums");
                });

            modelBuilder.Entity("FootballWeatherDataConsolidator.Data.Entites.GameWeatherEntity", b =>
                {
                    b.HasOne("FootballWeatherDataConsolidator.Data.Entites.GameEntity", "Game")
                        .WithOne("GameWeatherEntity")
                        .HasForeignKey("FootballWeatherDataConsolidator.Data.Entites.GameWeatherEntity", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("FootballWeatherDataConsolidator.Data.Entites.TeamPlaysInStadiumEntity", b =>
                {
                    b.HasOne("FootballWeatherDataConsolidator.Data.Entites.VenueEntity", "Stadium")
                        .WithMany("TeamPlaysInStadiumEntites")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FootballWeatherDataConsolidator.Data.Entites.TeamEntity", "Team")
                        .WithOne("TeamPlaysInStadium")
                        .HasForeignKey("FootballWeatherDataConsolidator.Data.Entites.TeamPlaysInStadiumEntity", "TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stadium");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("FootballWeatherDataConsolidator.Data.Entites.GameEntity", b =>
                {
                    b.Navigation("GameWeatherEntity")
                        .IsRequired();
                });

            modelBuilder.Entity("FootballWeatherDataConsolidator.Data.Entites.TeamEntity", b =>
                {
                    b.Navigation("TeamPlaysInStadium")
                        .IsRequired();
                });

            modelBuilder.Entity("FootballWeatherDataConsolidator.Data.Entites.VenueEntity", b =>
                {
                    b.Navigation("TeamPlaysInStadiumEntites");
                });
#pragma warning restore 612, 618
        }
    }
}
